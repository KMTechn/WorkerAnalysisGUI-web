[작업자 성과 분석 대시보드] 운영 및 관리 가이드

문서 버전: 2.0
최종 수정일: 2025년 8월 8일
담당자/팀: WorkerAnalysisGUI 개발팀

이 문서는 '작업자 성과 분석 대시보드'의 안정적인 운영과 장애 대응을 위한 절차 및 정보를 제공합니다.

1. 시스템 개요 (System Overview)

   - **서비스 역할**: 로컬 파일 시스템(C:\Sync)에 저장되는 CSV 형식의 작업 로그를 실시간으로 모니터링하고, 데이터를 자동 분석하여 웹 기반 대시보드를 통해 사용자에게 직관적인 시각화 데이터를 제공합니다. 이를 통해 데이터 기반 의사결정을 지원하고 공정 효율 개선에 기여합니다.

   - **서버 구성 정보**: 이 시스템은 단일 서버(일반적으로 사용자의 PC 또는 지정된 서버 1대)에서 운영됩니다.
     | 호스트명 | IP 주소 (Private) | 역할 |
     |---|---|---|
     | localhost | 127.0.0.1 | 애플리케이션 서버 (Flask) |

   - **아키텍처 다이어그램**:
     ```
     +-------------------+      HTTP/Socket.IO      +-------------------------+
     |  클라이언트       | <----------------------> |  Flask 웹 서버          |
     |  (웹 브라우저)    |                          |  (app.py)               |
     |                   |                          |                         |
     |  - HTML/CSS/JS    |                          |  - API 라우팅 (JSON)    |
     |  - Chart.js       |                          |  - SocketIO 이벤트 처리 |
     |  - 데이터 시각화  |                          |  - 템플릿 렌더링        |
     +-------------------+                          +-----------+-------------+
              ^                                                   |
              | 요청/응답                                         | 데이터 분석 요청
              |                                                   |
     +--------+--------+                                          v
     |  정적 파일/템플릿 |                                   +-------------------------+
     |  (static/,       | <-------------------------------> |  데이터 분석 모듈       |
     |   templates/)    |                                   |  (analyzer.py)          |
     +-------------------+                                   |                         |
                                                             |  - CSV 데이터 파싱/처리 |
                                                             |  - Pandas/Numpy 분석    |
                                                             +-----------+-------------+
                                                                         |
                                                                         | 파일 읽기
                                                                         v
                                                                 +-------------------+
                                                                 |  파일 시스템      |
                                                                 |  (C:\Sync\*.csv)  |
     +-------------------+                                       +-------------------+
     | Watchdog 감시자   | --------------------------------------> |                   |
     | (백그라운드 스레드)|   파일 변경 이벤트 감지               +-------------------+
     ```

2. 모니터링 (Monitoring)

   - **메인 대시보드**: 시스템의 모든 분석 데이터는 웹 브라우저를 통해 확인할 수 있습니다.
     - **URL**: http://127.0.0.1:8089

   - **주요 확인 지표 (Metrics)**:
     - **서버 리소스**: CPU / Memory 사용량 (서버의 Task Manager 또는 top/htop 명령어로 확인)
     - **데이터 처리량**: 총 처리 세트(Tray), 총 처리 수량(PCS)
     - **작업 효율성**: 평균 작업 시간, 평균 준비 시간(Latency), 초도 수율(FPY)
     - **오류 발생**: 총 공정 오류 수, 오류 로그 탭에서 상세 내역 확인
     - **데이터 무결성**: `C:\Sync` 폴더에 로그 파일이 정상적으로 쌓이고 있는지 확인

   - **알림(Alert) 채널**: 별도의 자동 알림 기능은 없습니다. 문제 발생 시 운영자가 직접 확인 후 담당자에게 연락해야 합니다.

3. 로그 관리 (Log Management)

   - **로그 종류 및 경로**:
     - **데이터 로그 (Source of Truth)**: `C:\Sync` 폴더에 `*작업이벤트로그*.csv` 형태로 저장됩니다. 오래된 로그는 `C:\Sync\log` 폴더로 아카이빙될 수 있습니다.
     - **애플리케이션 로그**: `python app.py`를 실행한 터미널(콘솔) 화면에 직접 출력됩니다. 파일로 저장되지 않으므로, 문제 발생 시 콘솔 화면의 내용을 확인해야 합니다.

   - **주요 로그 메시지**:
     - `[API] /api/data 요청 시작`: 클라이언트가 데이터 분석을 요청함.
     - `파일 변경 감지: ...`: `watchdog`이 데이터 로그 파일의 변경을 감지함.
     - `ERROR: ...` 또는 Python Traceback: 코드 실행 중 발생한 오류.

4. 표준 운영 절차 (Standard Operating Procedures)

   - **4.1. 서비스 시작/재시작**:
     ```bash
     # 1. WorkerAnalysisGUI-web 폴더로 이동
     cd C:\company\program\WorkerAnalysisGUI-web

     # 2. (권장) 가상 환경 활성화
     .\venv\Scripts\activate

     # 3. Flask 웹 서버 실행
     python app.py

     # 4. 재시작 시, 터미널에서 Ctrl+C를 눌러 서버를 중지한 후, 위 3번 명령어를 다시 실행합니다.
     ```

   - **4.2. 배포 및 롤백**:
     - **배포**: GitHub Actions를 통해 자동화되어 있습니다. `main` 브랜치에 코드가 푸시되면, `.github/workflows/deploy.yml` 워크플로우가 실행되어 원격 서버의 `deploy.sh` 스크립트를 실행합니다.
     - **롤백**: 자동화된 롤백 기능은 없습니다. 문제가 발생하면 이전 버전의 코드를 `main` 브랜치에 다시 푸시하여 재배포해야 합니다.

   - **4.3. 데이터 백업 및 복구**:
     - **백업 대상**: `C:\Sync` 폴더의 모든 `.csv` 파일 및 `log` 하위 폴더.
     - **백업 주기**: 정기적으로 (예: 매일) `C:\Sync` 폴더 전체를 다른 저장소(네트워크 드라이브, 클라우드 등)에 백업하는 것을 권장합니다.
     - **복구 절차**: 백업된 `.csv` 파일들을 `C:\Sync` 폴더에 다시 복사한 후, 서비스를 재시작합니다.

5. 장애 대응 (Incident Response)

   - **5.1. 주요 장애 유형 및 초기 대응**:
     | 장애 상황 | 예상 원인 | 초기 대응 절차 |
     |---|---|---|
     | **웹 페이지 접속 불가** | 서비스가 실행되지 않음, 포트(8089) 충돌 | 1. 터미널에서 `python app.py`가 실행 중인지 확인<br>2. 서비스 재시작<br>3. 다른 프로그램이 8089 포트를 사용 중인지 확인 |
     | **데이터가 업데이트 안됨** | `watchdog` 감지 실패, 로그 파일 경로/형식 오류 | 1. `C:\Sync` 폴더에 `*작업이벤트로그*.csv` 파일이 생성되는지 확인<br>2. 터미널에 파일 변경 감지 로그가 출력되는지 확인<br>3. 서비스 재시작 |
     | **분석 실행 시 오류 발생** | CSV 데이터 형식 오류, 코드 버그 | 1. 터미널에 출력된 `ERROR` 메시지 확인<br>2. 문제가 되는 CSV 파일의 내용을 확인 (예: 헤더, 인코딩)<br>3. 담당자에게 터미널 로그와 함께 문의 |

   - **5.2. 비상 연락망 (Escalation Policy)**:
     - **1차**: 시스템 운영 담당자가 직접 대응 (위 표 참조)
     - **2차 (미해결 시)**: WorkerAnalysisGUI 개발팀에 문의